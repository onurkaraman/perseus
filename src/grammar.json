{
	"comment": "Heavily referenced https://github.com/zaach/jison/blob/master/examples/json_ast.js",
	"lex": {
		"macros": {
			"esc": "\\",

			"lowercase": "[a-z]",
			"uppercase": "[A-Z]",
			"letter": "{lowercase}|{uppercase}",
			"digit": "[0-9]",

			"nonzerodigit": "[1-9]",
			"octdigit": "[0-7]",
			"bindigit": "0|1",
			"hexdigit": "{digit}|[a-f]|[A-F]",
			
			"octinteger": "0(o|0){octdigit}+|0{octdigit}+",
			"hexinteger": "0(x|X){hexdigit}+",
			"bininteger": "0(b|B){bindigit}+",
			"decimalinteger": "{nonzerodigit}{digit}*|0",
			
			"integer": "{decimalinteger}|{octinteger}|{hexinteger}|{bininteger}",

			"longinteger": "{integer}(l|L)",

			"intpart": "{digit}+",
			"fraction": "{esc}.{digit}+",
			"exponent": "(e|E)({esc}+|{esc}-){digit}+",

			"pointfloat": "({intpart}{fraction})|({intpart}{esc}.)",
			"exponentfloat": "({intpart}|{pointfloat}){exponent}",
			
			"floatnumber": "{pointfloat}|{exponentfloat}",

			"imagnumber": "({floatnumber}|{intpart})(j|J)"

		},
		"rules": [
			["and",			"return 'AND';"],
			["as",			"return 'AS';"],
			["assert",		"return 'ASSERT';"],
			["break",		"return 'BREAK';"],
			["class",		"return 'CLASS';"],
			["continue",	"return 'CONTINUE';"],
			["def",			"return 'DEF';"],
			["del",			"return 'DEL';"],
			["elif",		"return 'ELIF';"],
			["else",		"return 'ELSE';"],
			["except",		"return 'EXCEPT';"],
			["exec",		"return 'EXEC';"],
			["finally",		"return 'FINALLY';"],
			["for",			"return 'FOR';"],
			["from",		"return 'FROM';"],
			["global",		"return 'GLOBAL';"],
			["if",			"return 'IF';"],
			["import",		"return 'IMPORT';"],
			["in",			"return 'IN';"],
			["is",			"return 'IS';"],
			["lambda",		"return 'LAMBDA';"],
			["not",			"return 'NOT';"],
			["or",			"return 'OR';"],
			["pass",		"return 'PASS';"],
			["print",		"return 'PRINT';"],
			["raise",		"return 'RAISE';"],
			["return",		"return 'RETURN';"],
			["try",			"return 'TRY';"],
			["while",		"return 'WHILE';"],
			["with",		"return 'WITH';"],
			["yield",		"return 'YIELD';"],
			
			["{esc}+",		"return '+';"],
			["{esc}-",		"return '-';"],
			["{esc}*",		"return '*';"],
			["{esc}*{esc}*","return '**';"],
			["{esc}/",			"return '/';"],
			["{esc}/{esc}/",			"return '//';"],
			["%",			"return '%';"],
			["<<",			"return '<<';"],
			[">>",			"return '>>';"],
			["&",			"return '&';"],
			["{esc}|",		"return '|';"],
			["{esc}^",		"return '^';"],
			["~",			"return '~';"],
			["<",			"return '<';"],
			[">",			"return '>';"],
			["<=",			"return '<=';"],
			[">=",			"return '>=';"],
			["==",			"return '==';"],
			["!=",			"return '!=';"],
			["<>",			"return '<>';"],

			["{esc}(",		"return '(';"],
			["{esc})",		"return ')';"],
			["{esc}[",		"return '[';"],
			["{esc}]",		"return ']';"],
			["{esc}{",		"return '{';"],
			["{esc}}",		"return '}';"],
			["@",			"return '@';"],
			[",",			"return ',';"],
			[":",			"return ':';"],
			[".",			"return '.';"],
			["`",			"return '`';"],
			["=",			"return '=';"],
			[";",			"return ';';"],
			["{esc}+=",			"return '+=';"],
			["-=",			"return '-=';"],
			["{esc}*=",			"return '*=';"],
			["{esc}/=",			"return '/=';"],
			["{esc}/{esc}/=",			"return '//=';"],
			["%=",			"return '%=';"],
			["&=",			"return '&=';"],
			["|=",			"return '|=';"],
			["{esc}^=",			"return '^=';"],
			[">>=",			"return '>>=';"],
			["<<=",			"return '<<=';"],
			["{esc}*{esc}*=",			"return '**=';"],

			["#",			"return '#';"],
			["\\\\",			"return '\\\\';"],

			["{integer}|{longinteger}|{floatnumber}|{imagnumber}",			"return 'NUMBER';"],

			["({letter}|_)({letter}|{digit}|_)*",		"return 'NAME';"],


			["\\[",						"return '[';"],
			["\\]",						"return ']';"],
			["$",						"return 'EOF';"]
		]
	},

	"bnf": {
		"file": [
			["tokens EOF",				"return $1;"]
		],
		"tokens": [
			["array",					"$$ = $1;"]
		],
		"array": [
			["[ elementlist ]",			"$$ = $2;"]
		],
		"elementlist": [
			["elementlist , element",	"$$ = $1; $1.push($3);"],
			["element",					"$$ = [$1];"]
		],
		"element": [
			["number",					"$$ = $1;"],
			["string",					"$$ = $1;"]
		],
		"number": [
			["NUMBER", 					"$$ = Number(yytext);"]
		],
		"string": [
			["STRING",					"$$ = yytext;"]
		]
	}
}
